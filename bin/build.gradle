/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Declares utilities for starting Sorcer using sorcer boot, as we as starting Sorcer with Rio
 */

ext.versionFile = file('../version.properties')

task loadVersion {
    project.version = readVersion()
    group = 'org.sorcer'
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

task printVersion << {
    logger.quiet "Version: $version"
}

class ProjectVersion implements Serializable {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}

ext.sorcerDistHome = "../distribution/sorcer-${version}"

/*
 * Start Sorcer only
 */
task bootSorcer(type: Exec) {
    commandLine "ant", "-f", "${file("${sorcerDistHome}").path}/bin/sorcer-boot-arv-http.xml", "run"
}
bootSorcer.onlyIf {
    def jps = "jps -lm".execute()
    !jps.text.contains("boot-sorcer")
}

/*
 * Start Sorcer using Rio
 */
task bootSorcerRio(type: Exec) {
    commandLine "ant", "-f", "${file("${sorcerDistHome}").path}/bin/rio/boot-sorcer-rio.xml"
}
bootSorcerRio.onlyIf {
    def jps = "jps -lm".execute()
    !jps.text.contains("start-monitor")
}

/*
 * Destroy Sorcer
 */
task terminateSorcerRio(type: Exec) {
    commandLine "ant", "-f", "${file("${sorcerDistHome}").path}/bin/rio/destroy-sorcer-rio.xml"
}

/*
 * * Start a browser
 */
task browser(type: Exec) {
    commandLine "ant", "-f",
            "${file("${sorcerDistHome}").path}/bin/browser/bin/sorcer-browser.xml",
            "browser.spawn"
}
browser.onlyIf {
    def jps = "jps -lm".execute()
    !jps.text.contains("sorcer-browser")
}