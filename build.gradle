/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext{
    versionFile = file('version.properties')
}

task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    if (!versionFile.exists()) {
        throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    versionFile.withInputStream { stream ->
        versionProps.load(stream)
    }

    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}

task printVersion << {
    logger.quiet "Version: $version"
}

class ProjectVersion implements Serializable {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.1'
}

ext {
    enclaveRepo = "10.131.7.138:7001"
    //enclaveRepo = "10.0.1.9:50001"
    enclave = InetAddress.getLocalHost().getHostAddress().startsWith("10.131")
}

apply from: file('gradle/libraries.gradle')
apply from: file("gradle/testProperties.gradle")
apply from: file("gradle/utils.gradle")

allprojects {
    group = 'org.sorcer'
}

subprojects {
    if (project.name != "examples" && project.name != "sorcer-int-tests") {
        apply plugin: "maven"
        apply plugin: "maven-publish"

        if(project.name!="distribution") {
            apply plugin: "java"
            apply from: file("${rootProject.projectDir.path}/gradle/bootme.gradle")

            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        from components.java
                    }
                }
            }
        }
        publishing {
            repositories {
                maven {
                    url "http://$enclaveRepo"
                    //			url "http://repo1.maven.org/maven2"
                }
            }
        }
        repositories {
            mavenLocal()
            if (!enclave) {
                maven { url "http://www.rio-project.org/maven2" }
                maven { url "http://mvn.sorcersoft.com/content/groups/public" }
                mavenCentral()
            } else {
                maven { url "http://$enclaveRepo" }
            }
        }
    }

}
