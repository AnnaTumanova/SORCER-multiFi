import java.net.URL;
import java.io.File;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.config.ConfigUtil;
import sorcer.provider.boot.Booter;
import sorcer.util.SOS;
import sorcer.provider.boot.SorcerDescriptorUtil;
import sorcer.provider.boot.SorcerServiceDescriptor;

// Phoenix activation service
// Reggie service registrar and lookup service
// Outrigger JavaSpace
// Mahalo transaction server service
// Norm lease renewal service
// Mercury event mailbox
// Fiddler server side lookup discovery service
	
com.sun.jini.start {
	home = "${sorcer.home}";
	policy = "${java.security.policy}";
	ps = System.getProperty("path.separator");
	libPath = home + "${/}distribution${/}sorcer${sorcer.version}${/}lib$";

	// webster root directories
    jiniLibPath = home + "${/}rio${/}lib";
    sorcerLibPath = libPath + "${/}sorcer${/}lib";
    blitzLib = libPath + "${/}blitz";
    sorcerLibExtPath = libPath + "${/}sorcer${/}lib-ext";
    pathSeparator = File.pathSeparator;
    
	port = Booter.getWebsterPort(); 
    
    serviceDescriptors = new ServiceDescriptor[] {
       /* Wester descriptor */
  		new SorcerServiceDescriptor(null, 
  			policy,
			sorcerLibExtPath + "${/}webster-${sorcer.version}.jar", 
			"sorcer.tools.webster.Webster", 
			new String[] { home + "${/}configs${/}webster-prv.config" }),
/*
        new SorcerServiceDescriptor(
            "browser-dl.jar jsk-dl.jar",
            policy,
            jiniLibPath + "${/}browser.jar",
            "com.sun.jini.example.browser.Browser",
            new String[] { home + "${/}bin${/}jini${/}configs${/}browser.config" }),
*/

        new SorcerServiceDescriptor(
            "reggie-dl-${river.version}.jar jsk-dl-${river.version}.jar",
            policy,
            jiniLibPath + "/reggie-${river.version}.jar",
            "com.sun.jini.reggie.TransientRegistrarImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}reggie-boot.config" }),
            
        new SorcerServiceDescriptor(
            "mahalo-dl-${river.version}.jar jsk-dl-${river.version}.jar",
            policy,
            jiniLibPath + "/mahalo-${river.version}.jar",
            "com.sun.jini.mahalo.TransientMahaloImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}mahalo-boot.config" }),

/*
       new SorcerServiceDescriptor(
           "fiddler-dl.jar jsk-dl.jar",
           policy,
           jiniLibPath + "/fiddler.jar",
           "com.sun.jini.fiddler.TransientFiddlerImpl",
           new String[] { home + "${/}bin${/}jini${/}configs${/}fiddler-boot.config" }),

        new SorcerServiceDescriptor(
            "mercury-dl.jar jsk-dl.jar",
            policy,
            jiniLibPath + "/mercury.jar",
            "com.sun.jini.mercury.TransientMercuryImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}mercury-boot.config" }),


        new SorcerServiceDescriptor(
            "norm-dl.jar jsk-dl.jar",
            policy,
            jiniLibPath + "/norm.jar",
            "com.sun.jini.norm.TransientNormServerImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}norm-boot.config" }),


        new SorcerServiceDescriptor(
            "outrigger-dl-${river.version}.jar jsk-dl-${river.version}.jar",
            policy,
            jiniLibPath + "/outrigger.jar",
            "com.sun.jini.outrigger.TransientOutriggerImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}outrigger-boot.config" }),
       			
*/
  		// Blitz
       	new SorcerServiceDescriptor(
 			"blitz-dl.jar blitzui.jar",
            policy, 
            ConfigUtil.concat(new Object[] {
            	blitzLib, "${/}blitz.jar",
            	ps, blitzLib, "${/}blitzui.jar",
            	ps, home, "${/}lib${/}common${/}je-${je.version}.jar",
            	ps, jiniLibPath, "${/}serviceui-${river.version}.jar",
            	ps, home, "${/}lib${/}river${/}lib-dl${/}outrigger-dl-${river.version}.jar",
            	ps, jiniLibPath, "${/}jsk-platform-${river.version}.jar",
            	ps, jiniLibPath, "${/}jsk-lib-${river.version}.jar" }
            	),
	        "org.dancres.blitz.remote.BlitzServiceImpl",
          	new String[] { home + "${/}bin${/}blitz${/}configs${/}blitz.config" }),
    
       /* SORCER rendezvous Services */
       SorcerDescriptorUtil.getProvider(
       		policy, 
       		new String[] { home + "${/}bin${/}sorcer${/}rendezvous${/}configs${/}all-rendezvous-prv.config" }),

       	/* SORCER Catalog Service */
      		SorcerDescriptorUtil.getCataloger(
       		policy, 
       		new String[] { home + "${/}bin${/}sorcer${/}cataloger${/}configs${/}cataloger-prv.config" }),
     			
       	/* SORCER Logger Service */
       	SorcerDescriptorUtil.getLogger(
       		policy, 
       		new String[] { home + "${/}bin${/}sorcer${/}logger${/}configs${/}logger-prv.config"}),
       			
       	/* SORCER ExertMonitor Service */
       	SorcerDescriptorUtil.getExertMonitor(
       		policy, 
       		new String[] { home + "${/}bin${/}sorcer${/}exertmonitor${/}configs${/}exertmonitor-prv.config" }),
       			
       	/* SORCER Database Store Service */
       	SorcerDescriptorUtil.getDatabaseStorer(
       		policy, 
       		new String[] { home + "${/}bin${/}sorcer${/}dbp${/}configs${/}dbp-prv.config"}),
 
 		/* SORCER network exert manager */
 		SorcerDescriptorUtil.getExerter(
       		policy, 
       		new String[] { home + "${/}bin${/}sorcer${/}exerter${/}configs${/}exerter-prv.config" })
	        
    };
}
