/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

version = sorcerVersion

dependencies {
    compile "net.jini:jsk-platform:${riverVersion}"
    compile "net.jini:jsk-lib:${riverVersion}"
    compile "org.apache.river:start:${riverVersion}"
    compile "org.rioproject:rio-lib:${rioVersion}"
    compile "org.rioproject.monitor:monitor-api:${rioVersion}"
    compile "org.rioproject.cybernode:cybernode-api:${rioVersion}"
    compile "com.sleepycat:je:${jeVersion}"
    compile "org.dancres:lockmgr:${lockmgrVersion}"
    compile project(':sorcer-dl')
    compile files("${System.properties['java.home']}/../lib/tools.jar")
    /* Depend on Rio webster for running a test so we do not create a circular dependency on Sorcer Webster */
//    testCompile "org.rioproject:webster:${rioVersion}"
    testCompile libs.junit
    testRuntime libs.slf4j
}

jar {
    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
        include "sorcer/**"
        include "org/rioproject/admin/ServiceActivityProvider.class"
		include "org/rioproject/entry/ComputeResourceInfo.class"
    }
    manifest {
        attributes("Implementation-Title": "SORCER Platform",
                   "Implementation-Version": sorcerVersion)
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

test {
    testLogging {
        events "passed", "skipped", "failed"/*, "standardOut", "standardError"*/
    }
}

