Basic Definitions

A service is the work performed in which a service provider (one that serves)
exerts acquired abilities to execute a computation. 

No explicit provider references!
A reference to a provider and/or its activity is called a signature.
A signature specifies at least a service type and an operation (name of activity).
Service data is context-oriented - context aware exertions and operating system
An expression of collaborating abilities to be exerted by a federation of providers is called an exertion

A specification of provider's exerted acquired abilities is called an exertion.
An exertion is expressed in the Exertion-Oriented Language (EOL).

Service Provider (service actualization) is an instruction of service processor
	- defines its service types
	- implements and and owns its service types
	- satisfy three neutralities (location, protocol, implementation)

Service Exertion specifies runtime collaboration of providers (federation)
	- specifies federation's members (composition with dependencies)
	- specifies federation's context and data flow
	- specifies federation's control strategy

Services in SORCER: implement the Service interface: Service#service(Exertion)
	- service provider
	- exertion
	- service context (model)

SORCER Operating System (SOS)
	- executes exertions expressed in EOL
	- manages runtime service federations for exertions
	- provides a service-oriented shell (sosh) for the SOS

###############################################################################

The Exertion-Oriented Languages (EOL) Tutorial
Object-orientation = everything is an object => EaaO => Java
Service-orientation = everything is a service => EaaS => EOL
S2S => service requestor, provider, request, result, and invocation are services

1. Collections used in EOL
	eol/src/test/java/sorcer/arithmetic/collections
	
2. Service signatures, providers, services (exertions), 
   and service data (contexts) in  EOL
	eol/test/java/sorcer/eol/services
		
3. Intro to service provider/requestor development
	worker/src/main/java/sorcer/worker/provider
	worker/src/main/java/sorcer/worker/requestor
	worker/test/java/sorcer/worker/tests
	
4. Arithmetic providers and requestors, 
   contexts and exertions as providers
	eol/main/java/sorcer/arithmetic/provider
	eol/main/java/sorcer/arithmetic/requestor
	
5. Service contexts
	eol/test/java/sorcer/eol/contexts

6. Exertions: tasks, jobs, and blocks
	eol/test/java/sorcer/eol/tasks	
	eol/test/java/sorcer/eol/jobs	
	eol/test/java/sorcer/eol/blocks	
	
7. Contexts and  ent-models
	eol/test/java/sorcer/eol/contexts
	test/java/sorcer/arithmetic/parModels
	
8. Par-models, providers and agents
	pml/main/java/sorcer/pml/model
	pml/main/java/sorcer/pml/provider
	pml/test/java/sorcer/pml/modeling
	
9. Transdisciplinary computing - collaborative agregation of exertions and models
   Proxying ents and pars in exertions and models