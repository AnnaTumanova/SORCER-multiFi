/* 
* Provider dependency injections
* It uses component entry names defined in the SORCER provider
* as defined by sorcer.core.provider.SorcerProvider.
*
* @author Mike Sobolewski
*/
import java.util.logging.*;
import net.jini.jrmp.*;
import net.jini.jeri.*;
import net.jini.jeri.tcp.*;
import sorcer.core.*;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.*;
import sorcer.core.provider.*;
import sorcer.core.provider.ui.*;
import sorcer.provider.adder.*;
import sorcer.provider.adder.impl.*;

sorcer.core.provider.ServiceProvider {
        /* service provider deployment properties */
		name = "Adder";
		description = "Adder - bean provider";
		location = "MSTC/AFRL";
		properties="provider.properties";
		publishedInterfaces = new Class[] { sorcer.provider.adder.Adder.class };
		
		// add service UI
		//entries = new Entry[] { AdderUI.getUIDescriptor(),
			//new Comment("It uses sorcer.provider.adder.impl.Arithmometer for bean implementation") };

		threadManagement=true;

		//discoveryEnabled = false;
		spaceEnabled = true;
		//workerTransactional = true;
		//workerCount = 100;
		
		// remote logging
		remoteLogging=true;
		remoteLoggerManagerName="Logger";
		remoteLoggerLevel=Level.FINE;
		remoteLoggerName="remote.sorcer.provider.adder.Adder";

		// local private logging available via by RemoteLogger
		// remoteContextLogging = true;
		// remoteProviderLogging = true;
		
		
		// persist and reuse service ID
		// providerIdPersistent = false;
		
		// enable monitoring
		//monitorEnabled = true;
		
		// service beans	
		beanClasses = new Class[] { sorcer.provider.adder.impl.AdderImpl.class };
		
		iconName="sorcer.jpg";
}
	



