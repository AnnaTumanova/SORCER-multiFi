/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Build a map of the dependency artifacts to use.  Allows centralized definition of the version of artifacts to
 * use.  In that respect it serves a role similar to <dependencyManagement> in Maven
 */
ext {
	sorcerVersion = version

	groovyVersion = "2.3.8"
	rioVersion = "5.0.1"
	riverVersion = "2.2.2"
	slf4jVersion = "1.7.7"
	blitzVersion = "2.1.7"
	lockmgrVersion = "2.1.7"
	jeVersion = "5.0.104"
	junitVersion = "4.8.2"
	junitAddonsVersion = "1.4"
	antVersion = "1.8.2"

    sorcerDistHome = "${rootProject.projectDir.path}/distribution/build/sorcer-$version"
    rioHome = "$sorcerDistHome/rio-${rioVersion}"

    /* ========================================================
     * Load configs/sorcer.env to get webster port and address.
     * First check if we have a distribution, if we do, load the
     * sorcer.env from the distribution
     * ======================================================== */
    def sorcerEnvProps = new Properties()
    File sorcerEnvFile = file("${sorcerDistHome}/configs/sorcer.env")
    if(!sorcerEnvFile.exists())
        sorcerEnvFile = file("configs/sorcer.env")
    sorcerEnvFile.withReader { reader ->
        sorcerEnvProps.load(reader)
    }
    def sorcerEnvParsed = new ConfigSlurper().parse(sorcerEnvProps)
    sorcerEnv = sorcerEnvParsed

    websterPort = sorcerEnv.provider.webster.port
    if(sorcerEnv.provider.webster.interface.contains("localhost") ||
       sorcerEnv.provider.webster.interface.contains("127.0.0.1")) {
        websterAddress = InetAddress.getLocalHost().getHostName()
    } else {
        websterAddress = sorcerEnv.provider.webster.interface
    }
    websterUrl = "http://${websterAddress}:${websterPort}"

    startClassPath = files("${rioHome}/lib/groovy-all-${groovyVersion}.jar",
                             "${rioHome}/lib/logging/slf4j-api-${slf4jVersion}.jar",
                             "${rioHome}/lib/logging/slf4j-jdk14-${slf4jVersion}.jar",
                             "${rioHome}/lib/logging/rio-logging-support-${rioVersion}.jar",
                             "${rioHome}/lib/rio-platform-${rioVersion}.jar",
                             "${rioHome}/lib/start-${riverVersion}.jar",
                             "${rioHome}/lib/jsk-platform-${riverVersion}.jar")

    bootClassPath = files(startClassPath, "${sorcerDistHome}/lib/sorcer/lib/sorcer-boot-${version}.jar")

    libs = [
            junit : ["junit:junit:${junitVersion}", "junit-addons:junit-addons:${junitAddonsVersion}"],
            slf4j : ["org.slf4j:slf4j-api:${slf4jVersion}", "org.slf4j:slf4j-jdk14:${slf4jVersion}"]
    ]
}