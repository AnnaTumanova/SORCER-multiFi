/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "maven"

/*
 * Declares utilities for starting Sorcer using sorcer boot, as we as starting Sorcer with Rio
 */

/*
 * Start Sorcer only with http
 */
task bootSorcer(type: Exec) {
    description = 'Starts SORCER Operating System Services.'
    commandLine "ant", "-f", "${file("${sorcerDistHome}").path}/bin/sorcer/bin/boot-sorcer.xml", "spawn"
}
bootSorcer.onlyIf {
    def jps = "jps -lm".execute()
    !jps.text.contains("boot-sorcer")
}

/*
 * Start Sorcer only
 */
task bootSorcerNoHttpd(type: Exec) {
    description = 'Starts SORCER OS Services without a class servcer (webster).'
    commandLine "ant", "-f", "${file("${sorcerDistHome}").path}/bin/sorcer/bin/boot-sorcer-noHttpd.xml", "run"
}
bootSorcerNoHttpd.onlyIf {
    def jps = "jps -lm".execute()
    !jps.text.contains("boot-sorcer")
}

/*
 * Start Sorcer using Rio
 */
task bootSorcerRio(type: Exec, dependsOn: "webster") {
    description = 'Starts SORCER OS Services with Rio services for service provisioning.'
    commandLine "ant", "-f", "${file("${sorcerDistHome}").path}/bin/rio/boot-sorcer-rio.xml"
}
bootSorcerRio.onlyIf {
    File sorcerDist = file(sorcerDistHome)
    if(!sorcerDist.exists()) {
        println "Sorcer distribution not found, cannot start Sorcer"
        return false
    }
    def jps = "jps -lm".execute()
    !jps.text.contains("start-monitor")
}

/*
 * Destroy Sorcer and Rio
 */
task terminateSorcerRio(type: Exec) {
    description = 'Halts SORCER OS Services and Rio services.'
    commandLine "ant", "-f", "${file("${sorcerDistHome}").path}/bin/rio/destroy-sorcer-rio.xml"
}

/*
 * Destroy Sorcer and Rio
 */
task terminateSorcer(type: Exec) {
    description = 'Halts SORCER OS Services.'
    commandLine "ant", "-f", "${file("${sorcerDistHome}").path}/bin/sorcer/bin/destroy-sorcer.xml"
}

/*
 * Start a browser
 */
task browser(type: Exec) {
    description = 'Starts the SORCER service browser.'
    commandLine "ant", "-f",
            "${file("${sorcerDistHome}").path}/bin/browser/bin/sorcer-browser.xml",
            "browser.spawn"
}
browser.onlyIf {
    def jps = "jps -lm".execute()
    !jps.text.contains("sorcer-browser")
}

/*
 * Start the Rio UI
 */
task rioUI(type: Exec) {
    description = 'Starts a user agent (GUI) for Rio service provisioning.'
    commandLine "ant", "-f",
                "${file("${sorcerDistHome}").path}/bin/rio/rio-ui.xml",
                "spawn"
}
rioUI.onlyIf {
    def jps = "jps -lm".execute()
    !jps.text.contains("rio-ui")
}

/*
 * Start Sorcer Webster
 */
task webster(type: Exec) {
    description = 'Starts a class server (webster).'
    StringBuilder command = new StringBuilder()
    if(System.properties['os.name'].contains("Windows")) {
        commandLine "cmd.exe", "/C", "groovy", "${sorcerDistHome}/bin/webster/bin/webster.groovy"
    } else {
        commandLine "${sorcerDistHome}/bin/webster/bin/webster.groovy"
    }
}
webster.onlyIf {
    File sorcerDist = file(sorcerDistHome)
    if(!sorcerDist.exists()) {
        println "Sorcer distribution not found cannot start Webster."
        return false
    }
    boolean running
    try {
        def connection = new URL(websterUrl).openConnection()
        connection.responseCode
        running = true
        println "Webster already serving up ${websterAddress}:${websterPort}"
    } catch(Exception e) {
        running = false
    }
    !running
}

